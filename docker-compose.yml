version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: plinko-postgres
    environment:
      POSTGRES_DB: plinko_production
      POSTGRES_USER: plinko_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/create_database.sql:/docker-entrypoint-initdb.d/00-create_database.sql
    ports:
      - "5432:5432"
    networks:
      - plinko-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U plinko_user -d plinko_production"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: plinko-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - plinko-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Plinko Game Application
  plinko-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: plinko-app
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://plinko_user:${DB_PASSWORD:-secure_password_change_me}@postgres:5432/plinko_production
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379
      - TON_NETWORK=${TON_NETWORK:-mainnet}
      - TONAPI_KEY=${TONAPI_KEY}
      - TONCENTER_API_KEY=${TONCENTER_API_KEY}
      - GAME_WALLET_MNEMONIC=${GAME_WALLET_MNEMONIC}
      - GAME_WALLET_ADDRESS=${GAME_WALLET_ADDRESS}
      - JWT_SECRET=${JWT_SECRET}
      - PUBLIC_BASE_URL=${PUBLIC_BASE_URL:-http://localhost:3000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENABLE_REQUEST_LOGGING=${ENABLE_REQUEST_LOGGING:-true}
      - ENABLE_TRANSACTION_LOGGING=${ENABLE_TRANSACTION_LOGGING:-true}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - plinko-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: plinko-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - plinko-app
    networks:
      - plinko-network
    restart: unless-stopped

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: plinko-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - plinko-network
    restart: unless-stopped

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: plinko-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - plinko-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  plinko-network:
    driver: bridge