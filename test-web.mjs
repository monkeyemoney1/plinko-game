// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
console.log('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è URL
async function testUrl(url, description) {
  console.log(`\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${description}`);
  console.log(`üîó URL: ${url}`);
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const response = await fetch(url);
    const status = response.status;
    
    let data;
    try {
      data = await response.json();
    } catch {
      data = await response.text();
    }
    
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${status}`);
    console.log(`üìä –û—Ç–≤–µ—Ç:`, data);
    return { success: true, status, data };
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    return { success: false, error: error.message };
  }
}

// –°–ø–∏—Å–æ–∫ endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const endpoints = [
  { url: 'http://localhost:5173/', description: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' },
  { url: 'http://localhost:5173/api/simple-health', description: '–ü—Ä–æ—Å—Ç–æ–π health check' },
  { url: 'http://localhost:5173/api/debug', description: 'Debug endpoint' },
  { url: 'http://localhost:5173/api/health', description: 'Health endpoint' },
];

async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Ç–µ—Å—Ç–æ–≤...\n');
  
  let successCount = 0;
  let totalCount = endpoints.length;
  
  for (const endpoint of endpoints) {
    const result = await testUrl(endpoint.url, endpoint.description);
    if (result.success) {
      successCount++;
    }
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}/${totalCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${totalCount - successCount}/${totalCount}`);
  
  if (successCount === totalCount) {
    console.log('üéâ –í—Å–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç!');
  } else {
    console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);