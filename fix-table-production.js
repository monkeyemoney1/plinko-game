/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_wallets —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω API
 */

const BASE_URL = 'https://plinko-game-9hku.onrender.com';

async function createUserWalletsTable() {
  console.log('üóÑÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_wallets —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω API...\n');
  
  const createTableSQL = `
    CREATE TABLE IF NOT EXISTS user_wallets (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL,
        wallet_address VARCHAR(200) NOT NULL,
        is_connected BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
    )
  `;
  
  try {
    console.log('üìù –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã...');
    
    // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ health API (–∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç)
    const healthResponse = await fetch(`${BASE_URL}/api/health`);
    if (!healthResponse.ok) {
      throw new Error('API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ - —Å–æ–∑–¥–∞–µ–º —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    const testSQLResponse = await fetch(`${BASE_URL}/api/debug`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        action: 'create_table',
        sql: createTableSQL.trim()
      })
    });
    
    if (testSQLResponse.ok) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_wallets —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ debug API!');
    } else {
      console.log('‚ö†Ô∏è Debug API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...');
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ - —Å–æ–∑–¥–∞–µ–º —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ—à–µ–ª—å–∫–æ–º
      const userResponse = await fetch(`${BASE_URL}/api/users`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          username: 'table_creator',
          ton_address: 'UQCreateTableTestAddress123456789',
          telegram_id: '999888777'
        })
      });
      
      if (userResponse.ok) {
        const userData = await userResponse.json();
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${userData.user_id}, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã`);
        
        // –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞, —á—Ç–æ –¥–æ–ª–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
        const trackResponse = await fetch(`${BASE_URL}/api/wallet/track-connection`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            user_id: userData.user_id,
            wallet_address: 'UQCreateTableTestAddress123456789'
          })
        });
        
        if (trackResponse.ok) {
          console.log('‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ - —Ç–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞');
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', trackResponse.status);
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã...');
    
    const testAnalyticsResponse = await fetch(`${BASE_URL}/api/admin/analytics/wallets`);
    if (testAnalyticsResponse.ok) {
      const wallets = await testAnalyticsResponse.json();
      console.log(`‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${wallets.length}`);
    } else {
      console.log(`‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${testAnalyticsResponse.status}`);
    }
    
    const testUsersResponse = await fetch(`${BASE_URL}/api/admin/analytics/users`);
    if (testUsersResponse.ok) {
      const users = await testUsersResponse.json();
      console.log(`‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${users.length}`);
    } else {
      console.log(`‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${testUsersResponse.status}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
createUserWalletsTable();