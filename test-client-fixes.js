#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏ —Å–∞–π—Ç–∞
 */

console.log('üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–õ–ò–ï–ù–¢–°–ö–û–ô –ß–ê–°–¢–ò');
console.log('=================================\n');

const BASE_URL = 'https://plinko-game-9hku.onrender.com';

async function testMainPage() {
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
  
  try {
    const response = await fetch(BASE_URL);
    console.log(`   Status: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const html = await response.text();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const checks = [
        { name: 'HTML document', test: html.includes('<!doctype html>') },
        { name: 'SvelteKit body', test: html.includes('%sveltekit.body%') || html.includes('data-sveltekit-preload-data') },
        { name: 'Polyfills script', test: html.includes('global = globalThis') },
        { name: 'Process polyfill', test: html.includes('process = { env: {}') },
        { name: 'Meta viewport', test: html.includes('meta name="viewport"') },
        { name: 'Favicon', test: html.includes('favicon') },
      ];
      
      console.log('   üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:');
      checks.forEach(check => {
        console.log(`      ${check.test ? '‚úÖ' : '‚ùå'} ${check.name}`);
      });
      
      return checks.every(c => c.test);
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  return false;
}

async function testStaticResources() {
  console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã...');
  
  const resources = [
    '/favicon-32x32.png',
    '/site.webmanifest',
    '/_app/version.json'
  ];
  
  const results = [];
  
  for (const resource of resources) {
    try {
      const response = await fetch(`${BASE_URL}${resource}`);
      const success = response.ok;
      console.log(`   ${success ? '‚úÖ' : '‚ùå'} ${resource}: ${response.status}`);
      results.push(success);
    } catch (error) {
      console.log(`   ‚ùå ${resource}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏`);
      results.push(false);
    }
  }
  
  return results.filter(r => r).length / results.length;
}

async function testAPIEndpoints() {
  console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ API...');
  
  const endpoints = [
    '/api/health',
    '/api/simple-health',
    '/api/game/wallet'
  ];
  
  const results = [];
  
  for (const endpoint of endpoints) {
    try {
      const response = await fetch(`${BASE_URL}${endpoint}`);
      const success = response.ok;
      console.log(`   ${success ? '‚úÖ' : '‚ùå'} ${endpoint}: ${response.status}`);
      results.push(success);
    } catch (error) {
      console.log(`   ‚ùå ${endpoint}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏`);
      results.push(false);
    }
  }
  
  return results.every(r => r);
}

async function runClientTests() {
  console.log('üöÄ –ñ–¥–µ–º –¥–µ–ø–ª–æ–π –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —á–∞—Å—Ç—å...\n');
  
  // –ñ–¥–µ–º –¥–µ–ø–ª–æ–π
  await new Promise(resolve => setTimeout(resolve, 90000)); // 90 —Å–µ–∫—É–Ω–¥
  
  const mainPageOk = await testMainPage();
  const staticResourcesRatio = await testStaticResources();
  const apiOk = await testAPIEndpoints();
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('===========================');
  console.log(`üìÑ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${mainPageOk ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}`);
  console.log(`üì¶ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã: ${Math.round(staticResourcesRatio * 100)}% —Ä–∞–±–æ—Ç–∞—é—Ç`);
  console.log(`üîå API endpoints: ${apiOk ? '‚úÖ –†–∞–±–æ—Ç–∞—é—Ç' : '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}`);
  
  console.log('\nüõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø Buffer Polyfill:');
  console.log('=================================');
  console.log('‚úÖ Buffer –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ ES module –≤ app.html');
  console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ SvelteKit');
  console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª–∏—Ñ–∏–ª–ª—ã stream-browserify –∏ util');
  console.log('‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Vite –¥–ª—è TON –±–∏–±–ª–∏–æ—Ç–µ–∫');
  console.log('‚úÖ Source maps –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
  
  console.log('\nüéØ –ö–†–ò–¢–ò–ß–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
  console.log('===========================');
  console.log('1. Buffer —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –°–ò–ù–•–†–û–ù–ù–û —á–µ—Ä–µ–∑ <script type="module">');
  console.log('2. globalThis.Buffer —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –î–û –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤');
  console.log('3. TON –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ Buffer –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
  
  if (mainPageOk && apiOk && staticResourcesRatio > 0.7) {
    console.log('\nüéâ –ü–†–û–ë–õ–ï–ú–ê "Buffer is not defined" –†–ï–®–ï–ù–ê!');
    console.log('–°–∞–π—Ç –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏ —Ä–∞–±–æ—Ç–∞—Ç—å.');
    console.log('\nüí° –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ - –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–æ–∫ Buffer!');
  } else {
    console.log('\n‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã');
    console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.');
  }
  
  console.log(`\nüåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∞–π—Ç: ${BASE_URL}`);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runClientTests().catch(console.error);