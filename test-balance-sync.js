#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */

const BASE_URL = 'https://plinko-game-9hku.onrender.com';

console.log('üéØ –¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ë–ê–õ–ê–ù–°–ê');
console.log('==============================\n');

async function testBetPlacement() {
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏...');
  
  try {
    const response = await fetch(`${BASE_URL}/api/bets/place`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        user_id: 1,
        bet_amount: 5,
        currency: 'STARS',
        risk_level: 'MEDIUM',
        rows_count: 16,
        ball_id: Date.now(),
        status: 'in_progress'
      })
    });
    
    console.log(`   Status: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const data = await response.json();
      console.log('   ‚úÖ –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log(`   üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${data.balance?.stars_balance || 'N/A'} stars`);
      return data.balance;
    } else {
      const error = await response.text();
      console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞: ${error}`);
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
  }
  
  return null;
}

async function testBetCompletion(ballId, balance) {
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏...');
  
  try {
    const response = await fetch(`${BASE_URL}/api/bets/complete`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        user_id: 1,
        ball_id: ballId,
        result: {
          bin_index: 8,
          multiplier: 2.0,
          payout: 10,
          profit: 5,
          is_win: true
        }
      })
    });
    
    console.log(`   Status: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const data = await response.json();
      console.log('   ‚úÖ –°—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log(`   üèÜ –í—ã–ø–ª–∞—Ç–∞: ${data.result?.payout || 0} stars`);
      console.log(`   üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${data.balance?.stars_balance || 'N/A'} stars`);
      return true;
    } else {
      const error = await response.text();
      console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞: ${error}`);
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
  }
  
  return false;
}

async function testBalanceEndpoint() {
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...');
  
  try {
    const response = await fetch(`${BASE_URL}/api/users/1/balance`);
    console.log(`   Status: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const data = await response.json();
      console.log('   ‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log(`   üí∞ Stars: ${data.user?.balance?.stars || 'N/A'}`);
      console.log(`   üíé TON: ${data.user?.balance?.ton || 'N/A'}`);
    } else {
      const error = await response.text();
      console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞: ${error}`);
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
  }
}

async function runTests() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã bets
  await testBetPlacement();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
  const ballId = Date.now();
  await testBetCompletion(ballId);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
  await testBalanceEndpoint();
  
  console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('=========================');
  console.log('‚úÖ API endpoints –¥–ª—è —Å—Ç–∞–≤–æ–∫ —Å–æ–∑–¥–∞–Ω—ã');
  console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ bets —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
  console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
  
  console.log('\nüéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –ë–ê–õ–ê–ù–°–ê');
  console.log('===========================');
  console.log('1Ô∏è‚É£ –ë–∞–ª–∞–Ω—Å —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –º—è—á–∞');
  console.log('2Ô∏è‚É£ –í—ã–∏–≥—Ä—ã—à–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –º—è—á–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É');
  console.log('3Ô∏è‚É£ –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å —Å–µ—Ä–≤–µ—Ä–∞');
  console.log('4Ô∏è‚É£ –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –±–æ–ª—å—à–µ –Ω–µ —Ç–µ—Ä—è—é—Ç—Å—è');
  
  console.log('\n‚ú® –¢–µ–ø–µ—Ä—å –±–∞–ª–∞–Ω—Å –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);