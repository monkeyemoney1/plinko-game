#!/usr/bin/env node
/**
 * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –∏–≥—Ä—É, Stars –ø–ª–∞—Ç–µ–∂–∏, –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å, API
 */

const BASE_URL = 'https://plinko-game-9hku.onrender.com';

console.log('üöÄ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ PLINKO GAME');
console.log('===================================\n');

async function testMainPage() {
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
  
  try {
    const response = await fetch(BASE_URL);
    console.log(`   Status: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      console.log('   ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è');
    } else {
      console.log('   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π');
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

async function testGameAPI() {
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–µ API...');
  
  const endpoints = [
    '/api/health',
    '/api/simple-health',
    '/api/game/wallet'
  ];
  
  for (const endpoint of endpoints) {
    try {
      const response = await fetch(`${BASE_URL}${endpoint}`);
      console.log(`   ${endpoint}: ${response.status} ${response.statusText}`);
    } catch (error) {
      console.log(`   ${endpoint}: ‚ùå ${error.message}`);
    }
  }
}

async function testStarsPayment() {
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram Stars API...');
  
  // –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
  try {
    const response = await fetch(`${BASE_URL}/api/payments/stars/initiate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        telegram_id: '123456789',
        stars_amount: 10,
        description: 'Test payment'
      })
    });
    
    console.log(`   Initiate payment: ${response.status} ${response.statusText}`);
    
    if (response.status === 200) {
      const data = await response.json();
      console.log('   ‚úÖ Stars payment API working');
      console.log(`   üìÑ Invoice URL generated: ${data.invoice_url ? 'Yes' : 'No'}`);
    } else if (response.status === 400) {
      console.log('   ‚ö†Ô∏è  Expected validation error (missing auth)');
    }
  } catch (error) {
    console.log(`   ‚ùå Stars API Error: ${error.message}`);
  }
}

async function testAdminPanel() {
  console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å...');
  
  const endpoints = [
    '/admin',
    '/api/admin/stats',
    '/api/admin/analytics/users',
    '/api/admin/analytics/wallets',
    '/api/admin/analytics/stars',
    '/api/admin/game-stats'
  ];
  
  for (const endpoint of endpoints) {
    try {
      const response = await fetch(`${BASE_URL}${endpoint}`);
      const status = response.status;
      
      if (status === 200) {
        console.log(`   ‚úÖ ${endpoint}`);
      } else {
        console.log(`   ‚ùå ${endpoint}: ${status}`);
      }
    } catch (error) {
      console.log(`   ‚ùå ${endpoint}: ${error.message}`);
    }
  }
}

async function testDatabase() {
  console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const response = await fetch(`${BASE_URL}/api/admin/db/query`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        query: "SELECT COUNT(*) as total FROM users;"
      })
    });
    
    console.log(`   DB Query: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const data = await response.json();
      if (data.rows && data.rows[0]) {
        console.log(`   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${data.rows[0].total}`);
      }
    }
  } catch (error) {
    console.log(`   ‚ùå DB Error: ${error.message}`);
  }
}

async function checkDeploymentStatus() {
  console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞...');
  
  try {
    const response = await fetch(`${BASE_URL}/api/debug`);
    console.log(`   Debug endpoint: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const data = await response.json();
      console.log('   üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:');
      console.log(`      Node.js: ${data.node || 'N/A'}`);
      console.log(`      Environment: ${data.env || 'N/A'}`);
      console.log(`      Uptime: ${data.uptime || 'N/A'}`);
    }
  } catch (error) {
    console.log(`   ‚ùå Debug Error: ${error.message}`);
  }
}

async function runFullTest() {
  await testMainPage();
  await testGameAPI();
  await testStarsPayment();
  await testAdminPanel();
  await testDatabase();
  await checkDeploymentStatus();
  
  console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('==========================');
  console.log('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã');
  console.log('üîó –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç: https://plinko-game-9hku.onrender.com');
  console.log('üõ†Ô∏è  –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: https://plinko-game-9hku.onrender.com/admin');
  console.log('‚≠ê Telegram Stars: –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
  console.log('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç');
  
  console.log('\nüìã –ì–û–¢–û–í–û –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!');
  console.log('–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
}

// –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
runFullTest().catch(console.error);