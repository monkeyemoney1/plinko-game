import pg from 'pg';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const { Pool } = pg;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ production –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

async function createWithdrawalsTable() {
  const client = await pool.connect();
  
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlPath = join(__dirname, 'sql', 'create_withdrawals_table.sql');
    const sql = fs.readFileSync(sqlPath, 'utf8');
    
    console.log('üìÑ SQL —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã withdrawals...');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL
    await client.query(sql);
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ withdrawals —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
    const checkResult = await client.query(`
      SELECT table_name, column_name, data_type, is_nullable
      FROM information_schema.columns
      WHERE table_name = 'withdrawals'
      ORDER BY ordinal_position
    `);
    
    console.log('\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã withdrawals:');
    console.log('‚îÄ'.repeat(80));
    checkResult.rows.forEach(row => {
      console.log(`${row.column_name.padEnd(20)} | ${row.data_type.padEnd(20)} | NULL: ${row.is_nullable}`);
    });
    console.log('‚îÄ'.repeat(80));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    const indexResult = await client.query(`
      SELECT indexname, indexdef
      FROM pg_indexes
      WHERE tablename = 'withdrawals'
    `);
    
    console.log('\nüîç –ò–Ω–¥–µ–∫—Å—ã:');
    console.log('‚îÄ'.repeat(80));
    indexResult.rows.forEach(row => {
      console.log(`${row.indexname}`);
    });
    console.log('‚îÄ'.repeat(80));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
    throw error;
  } finally {
    client.release();
    await pool.end();
    console.log('\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
createWithdrawalsTable().catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
