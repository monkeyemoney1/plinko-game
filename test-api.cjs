const https = require('https');
const http = require('http');

const BASE_URL = 'http://localhost:5173';

function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const requestModule = urlObj.protocol === 'https:' ? https : http;
    
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || (urlObj.protocol === 'https:' ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    };

    const req = requestModule.request(requestOptions, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({ status: res.statusCode, data: jsonData });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', reject);

    if (options.body) {
      req.write(JSON.stringify(options.body));
    }

    req.end();
  });
}

async function testHealthEndpoint() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/health...');
  
  try {
    const response = await makeRequest(`${BASE_URL}/api/health`);
    console.log('‚úÖ Health Status:', response.status);
    console.log('üìä Health Data:', response.data);
    return response;
  } catch (error) {
    console.error('‚ùå Health check failed:', error.message);
    throw error;
  }
}

async function testMetricsEndpoint() {
  console.log('\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/metrics...');
  
  try {
    const response = await makeRequest(`${BASE_URL}/api/metrics`);
    console.log('‚úÖ Metrics Status:', response.status);
    console.log('üìä Metrics Data:', response.data);
    return response;
  } catch (error) {
    console.error('‚ùå Metrics failed:', error.message);
    throw error;
  }
}

async function testCreateUser() {
  console.log('\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  try {
    const userData = {
      ton_address: `EQTest${Date.now()}`,
      public_key: 'test_public_key_' + Date.now(),
      wallet_type: 'tonkeeper',
      wallet_version: '2.0'
    };

    const response = await makeRequest(`${BASE_URL}/api/users`, {
      method: 'POST',
      body: userData
    });

    console.log('‚úÖ User Creation Status:', response.status);
    console.log('üë§ User Data:', response.data);
    return response;
  } catch (error) {
    console.error('‚ùå User creation failed:', error.message);
    throw error;
  }
}

async function testUserBalance(userId) {
  console.log(`\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
  
  try {
    const response = await makeRequest(`${BASE_URL}/api/users/${userId}/balance`);
    console.log('‚úÖ Balance Status:', response.status);
    console.log('üí∞ Balance Data:', response.data);
    return response;
  } catch (error) {
    console.error('‚ùå Balance check failed:', error.message);
    throw error;
  }
}

async function testCreateBet(userId) {
  console.log(`\nüéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
  
  try {
    const betData = {
      user_id: userId,
      bet_amount: 5.0,
      currency: 'STARS',
      risk_level: 'MEDIUM',
      rows_count: 12,
      client_result: {
        multiplier: 1.8,
        payout: 9.0,
        profit: 4.0,
        is_win: true,
        ball_path: [0, 1, 1, 2, 2, 3, 4, 5, 5, 6]
      }
    };

    const response = await makeRequest(`${BASE_URL}/api/bets`, {
      method: 'POST',
      body: betData
    });

    console.log('‚úÖ Bet Status:', response.status);
    console.log('üéÆ Bet Data:', response.data);
    return response;
  } catch (error) {
    console.error('‚ùå Bet creation failed:', error.message);
    throw error;
  }
}

async function testUserGames(userId) {
  console.log(`\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
  
  try {
    const response = await makeRequest(`${BASE_URL}/api/users/${userId}/games?limit=5`);
    console.log('‚úÖ Games Status:', response.status);
    console.log('üìä Games Data:', response.data);
    return response;
  } catch (error) {
    console.error('‚ùå Games history failed:', error.message);
    throw error;
  }
}

async function testDebugEndpoint() {
  console.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/debug...');
  
  try {
    const response = await makeRequest(`${BASE_URL}/api/debug`);
    console.log('‚úÖ Debug Status:', response.status);
    console.log('üîß Debug Data:', response.data);
    return response;
  } catch (error) {
    console.error('‚ùå Debug failed:', error.message);
    // Debug –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    return null;
  }
}

async function runApiTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints...\n');
  
  try {
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
    await testHealthEndpoint();
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
    await testMetricsEndpoint();
    
    // 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResponse = await testCreateUser();
    const userId = userResponse.data?.user?.id;
    
    if (userId) {
      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await testUserBalance(userId);
      
      // 5. –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–≤–∫—É
      await testCreateBet(userId);
      
      // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä
      await testUserGames(userId);
    }
    
    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º debug endpoint
    await testDebugEndpoint();
    
    console.log('\nüéâ –í—Å–µ API —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
    if (userId) {
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã API —Ç–µ—Å—Ç–æ–≤:');
      console.log(`   - –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}`);
      console.log(`   - –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      console.log(`   - –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω`);
      console.log(`   - –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –ø–æ–ª—É—á–µ–Ω–∞`);
    }
    
  } catch (error) {
    console.error('\nüí• API —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω:', error.message);
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ–ª —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å
setTimeout(() => {
  runApiTests();
}, 3000);

console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (3 —Å–µ–∫—É–Ω–¥—ã)...');