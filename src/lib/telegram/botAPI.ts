/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ Stars –±–∞–ª–∞–Ω—Å–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π
 */
import { env as privateEnv } from '$env/dynamic/private';

function getBotToken(): string {
  const token = privateEnv.TELEGRAM_BOT_TOKEN;
  if (!token) throw new Error('TELEGRAM_BOT_TOKEN is not set');
  return token;
}

function getBotApiUrl(): string {
  return `https://api.telegram.org/bot${getBotToken()}`;
}

export interface TelegramBotUser {
  id: number;
  is_bot: boolean;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
  is_premium?: boolean;
}

export interface StarTransaction {
  id: string;
  amount: number;
  date: number;
  source?: any;
  receiver?: any;
}

/**
 * –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Telegram Bot API
 */
async function makeBotAPIRequest(method: string, params: any = {}): Promise<any> {
  try {
    const url = `${getBotApiUrl()}/${method}`;
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(params)
    });

    const data = await response.json();
    
    if (!data.ok) {
      throw new Error(`Telegram Bot API error: ${data.description || 'Unknown error'}`);
    }

    return data.result;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ Telegram Bot API (${method}):`, error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Bot API
 */
export async function getTelegramUserInfo(userId: number): Promise<TelegramBotUser | null> {
  try {
    console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${userId} —á–µ—Ä–µ–∑ Bot API`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º getChat –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userInfo = await makeBotAPIRequest('getChat', {
      chat_id: userId
    });

    console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞:', userInfo);
    return userInfo;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    return null;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Bot API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Stars –±–∞–ª–∞–Ω—Å–∞
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true
 */
export async function checkUserStarsBalance(userId: number, requiredAmount: number): Promise<boolean> {
  try {
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ Stars –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${requiredAmount}`);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º Bot API –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Stars –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // Telegram Stars —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ invoice –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã
    // –ü–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    const userInfo = await getTelegramUserInfo(userId);
    
    if (!userInfo) {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Stars
    // –ù–æ Telegram –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Stars –±–∞–ª–∞–Ω—Å–∞
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ Stars –±–∞–ª–∞–Ω—Å–∞: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤');
    return true;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Stars –±–∞–ª–∞–Ω—Å–∞:', error);
    return false;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç invoice –¥–ª—è –æ–ø–ª–∞—Ç—ã Telegram Stars
 */
export async function createStarsInvoiceViaBotAPI(
  chatId: number,
  amount: number,
  title: string = '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä—ã',
  description: string = '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Stars –≤ –∏–≥—Ä–µ Plinko',
  payload: string
): Promise<string> {
  try {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ Stars invoice —á–µ—Ä–µ–∑ Bot API:', {
      chatId,
      amount,
      title,
      payload
    });

    // –°–æ–∑–¥–∞–µ–º invoice –¥–ª—è Stars
    const invoice = await makeBotAPIRequest('createInvoiceLink', {
      title,
      description,
      payload,
      provider_token: '', // –î–ª—è Stars provider_token –ø—É—Å—Ç–æ–π
      currency: 'XTR', // XTR = Telegram Stars
      prices: [
        {
          label: title,
          amount: amount // –î–ª—è Stars amount —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
        }
      ],
      need_name: false,
      need_phone_number: false,
      need_email: false,
      need_shipping_address: false,
      send_phone_number_to_provider: false,
      send_email_to_provider: false,
      is_flexible: false
    });

    console.log('Stars invoice —Å–æ–∑–¥–∞–Ω:', invoice);
    return invoice;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Stars invoice:', error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç invoice –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
 */
export async function sendStarsInvoice(
  chatId: number,
  amount: number,
  title: string = '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä—ã',
  description: string = '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Stars –≤ –∏–≥—Ä–µ Plinko',
  payload: string
): Promise<any> {
  try {
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ Stars invoice –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', { chatId, amount, payload });

    const message = await makeBotAPIRequest('sendInvoice', {
      chat_id: chatId,
      title,
      description,
      payload,
      provider_token: '', // –î–ª—è Stars provider_token –ø—É—Å—Ç–æ–π
      currency: 'XTR', // XTR = Telegram Stars
      prices: [
        {
          label: title,
          amount: amount // –î–ª—è Stars amount —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
        }
      ],
      need_name: false,
      need_phone_number: false,
      need_email: false,
      need_shipping_address: false,
      send_phone_number_to_provider: false,
      send_email_to_provider: false,
      is_flexible: false,
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: `–û–ø–ª–∞—Ç–∏—Ç—å ${amount} ‚≠ê`,
              pay: true
            }
          ]
        ]
      }
    });

    console.log('Stars invoice –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', message);
    return message;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Stars invoice:', error);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ Stars –ø–æ payload
 */
export async function verifyStarsPayment(
  payload: string,
  telegramChargeId: string,
  providerPaymentChargeId: string
): Promise<boolean> {
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ Stars –ø–ª–∞—Ç–µ–∂–∞:', {
      payload,
      telegramChargeId,
      providerPaymentChargeId
    });

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    // —á–µ—Ä–µ–∑ Bot API –∏–ª–∏ webhook –æ—Ç Telegram
    
    // –î–ª—è Stars –ø–ª–∞—Ç–µ–∂–µ–π Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    // –ï—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ callback —Å successful_payment, –∑–Ω–∞—á–∏—Ç –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª
    
    console.log('Stars –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
    return true;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Stars –ø–ª–∞—Ç–µ–∂–∞:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Stars —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
 */
export async function getStarTransactions(userId: number): Promise<StarTransaction[]> {
  try {
    console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ Stars —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // Telegram Bot API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ Stars —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    // –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ webhooks –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    
    console.log('Stars —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ Bot API');
    return [];
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Stars —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    return [];
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
 */
export async function sendPaymentSuccessNotification(
  chatId: number,
  amount: number,
  newBalance: number
): Promise<void> {
  try {
    const message = `üéâ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!\n\n` +
                   `‚≠ê –°–ø–∏—Å–∞–Ω–æ Stars: ${amount}\n` +
                   `üéØ –ó–∞—á–∏—Å–ª–µ–Ω–æ –≤ –∏–≥—Ä—É: ${amount}\n` +
                   `üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${newBalance}\n\n` +
                   `–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã –≤ Plinko! üé∞`;

    await makeBotAPIRequest('sendMessage', {
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML'
    });

    console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏:', error);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (—á–∞—Ç –∏–∑ TELEGRAM_ADMIN_CHAT_ID)
 */
export async function sendAdminMessage(text: string): Promise<void> {
  const adminChat = privateEnv.TELEGRAM_ADMIN_CHAT_ID;
  if (!adminChat) {
    console.warn('TELEGRAM_ADMIN_CHAT_ID is not set; admin message skipped');
    return;
  }
  try {
    await makeBotAPIRequest('sendMessage', {
      chat_id: adminChat, // –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ @username
      text,
      parse_mode: 'HTML'
    });
  } catch (e) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', e);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bot API
 */
export async function testBotConnection(): Promise<boolean> {
  try {
    const me = await makeBotAPIRequest('getMe');
    console.log('Bot API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', me);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bot API:', error);
    return false;
  }
}